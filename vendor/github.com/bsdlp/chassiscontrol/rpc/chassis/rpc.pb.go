// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.23.4
// source: rpc/chassis/rpc.proto

package chassis

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ChassisControlCommand int32

const (
	ChassisControlCommand_OFF                  ChassisControlCommand = 0
	ChassisControlCommand_ON                   ChassisControlCommand = 1
	ChassisControlCommand_CYCLE                ChassisControlCommand = 2
	ChassisControlCommand_RESET                ChassisControlCommand = 3
	ChassisControlCommand_DIAGNOSTIC_INTERRUPT ChassisControlCommand = 4
	ChassisControlCommand_SOFT_POWER_OFF       ChassisControlCommand = 5
)

// Enum value maps for ChassisControlCommand.
var (
	ChassisControlCommand_name = map[int32]string{
		0: "OFF",
		1: "ON",
		2: "CYCLE",
		3: "RESET",
		4: "DIAGNOSTIC_INTERRUPT",
		5: "SOFT_POWER_OFF",
	}
	ChassisControlCommand_value = map[string]int32{
		"OFF":                  0,
		"ON":                   1,
		"CYCLE":                2,
		"RESET":                3,
		"DIAGNOSTIC_INTERRUPT": 4,
		"SOFT_POWER_OFF":       5,
	}
)

func (x ChassisControlCommand) Enum() *ChassisControlCommand {
	p := new(ChassisControlCommand)
	*p = x
	return p
}

func (x ChassisControlCommand) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChassisControlCommand) Descriptor() protoreflect.EnumDescriptor {
	return file_rpc_chassis_rpc_proto_enumTypes[0].Descriptor()
}

func (ChassisControlCommand) Type() protoreflect.EnumType {
	return &file_rpc_chassis_rpc_proto_enumTypes[0]
}

func (x ChassisControlCommand) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ChassisControlCommand.Descriptor instead.
func (ChassisControlCommand) EnumDescriptor() ([]byte, []int) {
	return file_rpc_chassis_rpc_proto_rawDescGZIP(), []int{0}
}

type GetChassisStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Target string `protobuf:"bytes,1,opt,name=target,proto3" json:"target,omitempty"`
}

func (x *GetChassisStatusRequest) Reset() {
	*x = GetChassisStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_chassis_rpc_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetChassisStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChassisStatusRequest) ProtoMessage() {}

func (x *GetChassisStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_chassis_rpc_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChassisStatusRequest.ProtoReflect.Descriptor instead.
func (*GetChassisStatusRequest) Descriptor() ([]byte, []int) {
	return file_rpc_chassis_rpc_proto_rawDescGZIP(), []int{0}
}

func (x *GetChassisStatusRequest) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

type GetChassisStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Target                     string `protobuf:"bytes,1,opt,name=target,proto3" json:"target,omitempty"`
	PowerControlFault          bool   `protobuf:"varint,2,opt,name=power_control_fault,json=powerControlFault,proto3" json:"power_control_fault,omitempty"`
	PowerFault                 bool   `protobuf:"varint,3,opt,name=power_fault,json=powerFault,proto3" json:"power_fault,omitempty"`
	Interlock                  bool   `protobuf:"varint,4,opt,name=interlock,proto3" json:"interlock,omitempty"`
	PowerOverload              bool   `protobuf:"varint,5,opt,name=power_overload,json=powerOverload,proto3" json:"power_overload,omitempty"`
	PoweredOn                  bool   `protobuf:"varint,6,opt,name=powered_on,json=poweredOn,proto3" json:"powered_on,omitempty"`
	PoweredOnByIpmi            bool   `protobuf:"varint,7,opt,name=powered_on_by_ipmi,json=poweredOnByIpmi,proto3" json:"powered_on_by_ipmi,omitempty"`
	LastPowerDownFault         bool   `protobuf:"varint,8,opt,name=last_power_down_fault,json=lastPowerDownFault,proto3" json:"last_power_down_fault,omitempty"`
	LastPowerDownInterlock     bool   `protobuf:"varint,9,opt,name=last_power_down_interlock,json=lastPowerDownInterlock,proto3" json:"last_power_down_interlock,omitempty"`
	LastPowerDownOverload      bool   `protobuf:"varint,10,opt,name=last_power_down_overload,json=lastPowerDownOverload,proto3" json:"last_power_down_overload,omitempty"`
	LastPowerDownSupplyFailure bool   `protobuf:"varint,11,opt,name=last_power_down_supply_failure,json=lastPowerDownSupplyFailure,proto3" json:"last_power_down_supply_failure,omitempty"`
	ResetButtonDisabled        bool   `protobuf:"varint,12,opt,name=reset_button_disabled,json=resetButtonDisabled,proto3" json:"reset_button_disabled,omitempty"`
	PowerOffButtonDisabled     bool   `protobuf:"varint,13,opt,name=power_off_button_disabled,json=powerOffButtonDisabled,proto3" json:"power_off_button_disabled,omitempty"`
}

func (x *GetChassisStatusResponse) Reset() {
	*x = GetChassisStatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_chassis_rpc_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetChassisStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChassisStatusResponse) ProtoMessage() {}

func (x *GetChassisStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_chassis_rpc_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChassisStatusResponse.ProtoReflect.Descriptor instead.
func (*GetChassisStatusResponse) Descriptor() ([]byte, []int) {
	return file_rpc_chassis_rpc_proto_rawDescGZIP(), []int{1}
}

func (x *GetChassisStatusResponse) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

func (x *GetChassisStatusResponse) GetPowerControlFault() bool {
	if x != nil {
		return x.PowerControlFault
	}
	return false
}

func (x *GetChassisStatusResponse) GetPowerFault() bool {
	if x != nil {
		return x.PowerFault
	}
	return false
}

func (x *GetChassisStatusResponse) GetInterlock() bool {
	if x != nil {
		return x.Interlock
	}
	return false
}

func (x *GetChassisStatusResponse) GetPowerOverload() bool {
	if x != nil {
		return x.PowerOverload
	}
	return false
}

func (x *GetChassisStatusResponse) GetPoweredOn() bool {
	if x != nil {
		return x.PoweredOn
	}
	return false
}

func (x *GetChassisStatusResponse) GetPoweredOnByIpmi() bool {
	if x != nil {
		return x.PoweredOnByIpmi
	}
	return false
}

func (x *GetChassisStatusResponse) GetLastPowerDownFault() bool {
	if x != nil {
		return x.LastPowerDownFault
	}
	return false
}

func (x *GetChassisStatusResponse) GetLastPowerDownInterlock() bool {
	if x != nil {
		return x.LastPowerDownInterlock
	}
	return false
}

func (x *GetChassisStatusResponse) GetLastPowerDownOverload() bool {
	if x != nil {
		return x.LastPowerDownOverload
	}
	return false
}

func (x *GetChassisStatusResponse) GetLastPowerDownSupplyFailure() bool {
	if x != nil {
		return x.LastPowerDownSupplyFailure
	}
	return false
}

func (x *GetChassisStatusResponse) GetResetButtonDisabled() bool {
	if x != nil {
		return x.ResetButtonDisabled
	}
	return false
}

func (x *GetChassisStatusResponse) GetPowerOffButtonDisabled() bool {
	if x != nil {
		return x.PowerOffButtonDisabled
	}
	return false
}

type ChassisControlRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Target                string                `protobuf:"bytes,1,opt,name=target,proto3" json:"target,omitempty"`
	ChassisControlCommand ChassisControlCommand `protobuf:"varint,2,opt,name=chassis_control_command,json=chassisControlCommand,proto3,enum=github.com.bsdlp.chassiscontrol.ChassisControlCommand" json:"chassis_control_command,omitempty"`
}

func (x *ChassisControlRequest) Reset() {
	*x = ChassisControlRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_chassis_rpc_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChassisControlRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChassisControlRequest) ProtoMessage() {}

func (x *ChassisControlRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_chassis_rpc_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChassisControlRequest.ProtoReflect.Descriptor instead.
func (*ChassisControlRequest) Descriptor() ([]byte, []int) {
	return file_rpc_chassis_rpc_proto_rawDescGZIP(), []int{2}
}

func (x *ChassisControlRequest) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

func (x *ChassisControlRequest) GetChassisControlCommand() ChassisControlCommand {
	if x != nil {
		return x.ChassisControlCommand
	}
	return ChassisControlCommand_OFF
}

type ChassisControlResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Target string `protobuf:"bytes,1,opt,name=target,proto3" json:"target,omitempty"`
	Error  string `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *ChassisControlResponse) Reset() {
	*x = ChassisControlResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_chassis_rpc_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChassisControlResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChassisControlResponse) ProtoMessage() {}

func (x *ChassisControlResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_chassis_rpc_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChassisControlResponse.ProtoReflect.Descriptor instead.
func (*ChassisControlResponse) Descriptor() ([]byte, []int) {
	return file_rpc_chassis_rpc_proto_rawDescGZIP(), []int{3}
}

func (x *ChassisControlResponse) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

func (x *ChassisControlResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

var File_rpc_chassis_rpc_proto protoreflect.FileDescriptor

var file_rpc_chassis_rpc_proto_rawDesc = []byte{
	0x0a, 0x15, 0x72, 0x70, 0x63, 0x2f, 0x63, 0x68, 0x61, 0x73, 0x73, 0x69, 0x73, 0x2f, 0x72, 0x70,
	0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x62, 0x73, 0x64, 0x6c, 0x70, 0x2e, 0x63, 0x68, 0x61, 0x73, 0x73, 0x69,
	0x73, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x22, 0x31, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x43,
	0x68, 0x61, 0x73, 0x73, 0x69, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x22, 0xee, 0x04, 0x0a, 0x18,
	0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x73, 0x73, 0x69, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x12, 0x2e, 0x0a, 0x13, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x5f, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x70,
	0x6f, 0x77, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x46, 0x61, 0x75, 0x6c, 0x74,
	0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x46, 0x61, 0x75, 0x6c,
	0x74, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6c, 0x6f, 0x63, 0x6b, 0x12,
	0x25, 0x0a, 0x0e, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x6c, 0x6f, 0x61,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x4f, 0x76,
	0x65, 0x72, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x65,
	0x64, 0x5f, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x70, 0x6f, 0x77, 0x65,
	0x72, 0x65, 0x64, 0x4f, 0x6e, 0x12, 0x2b, 0x0a, 0x12, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x65, 0x64,
	0x5f, 0x6f, 0x6e, 0x5f, 0x62, 0x79, 0x5f, 0x69, 0x70, 0x6d, 0x69, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x65, 0x64, 0x4f, 0x6e, 0x42, 0x79, 0x49, 0x70,
	0x6d, 0x69, 0x12, 0x31, 0x0a, 0x15, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72,
	0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x5f, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x12, 0x6c, 0x61, 0x73, 0x74, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x44, 0x6f, 0x77, 0x6e,
	0x46, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x39, 0x0a, 0x19, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x6f,
	0x77, 0x65, 0x72, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6c, 0x6f,
	0x63, 0x6b, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x6c, 0x61, 0x73, 0x74, 0x50, 0x6f,
	0x77, 0x65, 0x72, 0x44, 0x6f, 0x77, 0x6e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6c, 0x6f, 0x63, 0x6b,
	0x12, 0x37, 0x0a, 0x18, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x64,
	0x6f, 0x77, 0x6e, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x15, 0x6c, 0x61, 0x73, 0x74, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x44, 0x6f, 0x77,
	0x6e, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x42, 0x0a, 0x1e, 0x6c, 0x61, 0x73,
	0x74, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x5f, 0x73, 0x75, 0x70,
	0x70, 0x6c, 0x79, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x1a, 0x6c, 0x61, 0x73, 0x74, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x44, 0x6f, 0x77, 0x6e,
	0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x12, 0x32, 0x0a,
	0x15, 0x72, 0x65, 0x73, 0x65, 0x74, 0x5f, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x5f, 0x64, 0x69,
	0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x72, 0x65,
	0x73, 0x65, 0x74, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x12, 0x39, 0x0a, 0x19, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x66, 0x5f, 0x62,
	0x75, 0x74, 0x74, 0x6f, 0x6e, 0x5f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x4f, 0x66, 0x66, 0x42, 0x75,
	0x74, 0x74, 0x6f, 0x6e, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x22, 0x9f, 0x01, 0x0a,
	0x15, 0x43, 0x68, 0x61, 0x73, 0x73, 0x69, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x6e,
	0x0a, 0x17, 0x63, 0x68, 0x61, 0x73, 0x73, 0x69, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x36, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x62, 0x73, 0x64,
	0x6c, 0x70, 0x2e, 0x63, 0x68, 0x61, 0x73, 0x73, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x2e, 0x43, 0x68, 0x61, 0x73, 0x73, 0x69, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x15, 0x63, 0x68, 0x61, 0x73, 0x73, 0x69, 0x73,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x22, 0x46,
	0x0a, 0x16, 0x43, 0x68, 0x61, 0x73, 0x73, 0x69, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x2a, 0x6c, 0x0a, 0x15, 0x43, 0x68, 0x61, 0x73, 0x73, 0x69,
	0x73, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12,
	0x07, 0x0a, 0x03, 0x4f, 0x46, 0x46, 0x10, 0x00, 0x12, 0x06, 0x0a, 0x02, 0x4f, 0x4e, 0x10, 0x01,
	0x12, 0x09, 0x0a, 0x05, 0x43, 0x59, 0x43, 0x4c, 0x45, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x52,
	0x45, 0x53, 0x45, 0x54, 0x10, 0x03, 0x12, 0x18, 0x0a, 0x14, 0x44, 0x49, 0x41, 0x47, 0x4e, 0x4f,
	0x53, 0x54, 0x49, 0x43, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x52, 0x55, 0x50, 0x54, 0x10, 0x04,
	0x12, 0x12, 0x0a, 0x0e, 0x53, 0x4f, 0x46, 0x54, 0x5f, 0x50, 0x4f, 0x57, 0x45, 0x52, 0x5f, 0x4f,
	0x46, 0x46, 0x10, 0x05, 0x32, 0xaa, 0x02, 0x0a, 0x0e, 0x43, 0x68, 0x61, 0x73, 0x73, 0x69, 0x73,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x12, 0x87, 0x01, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x43,
	0x68, 0x61, 0x73, 0x73, 0x69, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x38, 0x2e, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x62, 0x73, 0x64, 0x6c, 0x70, 0x2e,
	0x63, 0x68, 0x61, 0x73, 0x73, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x47,
	0x65, 0x74, 0x43, 0x68, 0x61, 0x73, 0x73, 0x69, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x39, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x62, 0x73, 0x64, 0x6c, 0x70, 0x2e, 0x63, 0x68, 0x61, 0x73, 0x73, 0x69,
	0x73, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x73,
	0x73, 0x69, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x8d, 0x01, 0x0a, 0x1a, 0x49, 0x73, 0x73, 0x75, 0x65, 0x43, 0x68, 0x61, 0x73, 0x73,
	0x69, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x12, 0x36, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x62, 0x73,
	0x64, 0x6c, 0x70, 0x2e, 0x63, 0x68, 0x61, 0x73, 0x73, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x2e, 0x43, 0x68, 0x61, 0x73, 0x73, 0x69, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x62, 0x73, 0x64, 0x6c, 0x70, 0x2e, 0x63, 0x68, 0x61, 0x73,
	0x73, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x43, 0x68, 0x61, 0x73, 0x73,
	0x69, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x42, 0x2d, 0x5a, 0x2b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x62, 0x73, 0x64, 0x6c, 0x70, 0x2f, 0x63, 0x68, 0x61, 0x73, 0x73, 0x69, 0x73, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x2f, 0x72, 0x70, 0x63, 0x2f, 0x63, 0x68, 0x61, 0x73, 0x73, 0x69, 0x73,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_rpc_chassis_rpc_proto_rawDescOnce sync.Once
	file_rpc_chassis_rpc_proto_rawDescData = file_rpc_chassis_rpc_proto_rawDesc
)

func file_rpc_chassis_rpc_proto_rawDescGZIP() []byte {
	file_rpc_chassis_rpc_proto_rawDescOnce.Do(func() {
		file_rpc_chassis_rpc_proto_rawDescData = protoimpl.X.CompressGZIP(file_rpc_chassis_rpc_proto_rawDescData)
	})
	return file_rpc_chassis_rpc_proto_rawDescData
}

var file_rpc_chassis_rpc_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_rpc_chassis_rpc_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_rpc_chassis_rpc_proto_goTypes = []interface{}{
	(ChassisControlCommand)(0),       // 0: github.com.bsdlp.chassiscontrol.ChassisControlCommand
	(*GetChassisStatusRequest)(nil),  // 1: github.com.bsdlp.chassiscontrol.GetChassisStatusRequest
	(*GetChassisStatusResponse)(nil), // 2: github.com.bsdlp.chassiscontrol.GetChassisStatusResponse
	(*ChassisControlRequest)(nil),    // 3: github.com.bsdlp.chassiscontrol.ChassisControlRequest
	(*ChassisControlResponse)(nil),   // 4: github.com.bsdlp.chassiscontrol.ChassisControlResponse
}
var file_rpc_chassis_rpc_proto_depIdxs = []int32{
	0, // 0: github.com.bsdlp.chassiscontrol.ChassisControlRequest.chassis_control_command:type_name -> github.com.bsdlp.chassiscontrol.ChassisControlCommand
	1, // 1: github.com.bsdlp.chassiscontrol.ChassisControl.GetChassisStatus:input_type -> github.com.bsdlp.chassiscontrol.GetChassisStatusRequest
	3, // 2: github.com.bsdlp.chassiscontrol.ChassisControl.IssueChassisControlCommand:input_type -> github.com.bsdlp.chassiscontrol.ChassisControlRequest
	2, // 3: github.com.bsdlp.chassiscontrol.ChassisControl.GetChassisStatus:output_type -> github.com.bsdlp.chassiscontrol.GetChassisStatusResponse
	4, // 4: github.com.bsdlp.chassiscontrol.ChassisControl.IssueChassisControlCommand:output_type -> github.com.bsdlp.chassiscontrol.ChassisControlResponse
	3, // [3:5] is the sub-list for method output_type
	1, // [1:3] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_rpc_chassis_rpc_proto_init() }
func file_rpc_chassis_rpc_proto_init() {
	if File_rpc_chassis_rpc_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_rpc_chassis_rpc_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetChassisStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_chassis_rpc_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetChassisStatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_chassis_rpc_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChassisControlRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_chassis_rpc_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChassisControlResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_rpc_chassis_rpc_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_rpc_chassis_rpc_proto_goTypes,
		DependencyIndexes: file_rpc_chassis_rpc_proto_depIdxs,
		EnumInfos:         file_rpc_chassis_rpc_proto_enumTypes,
		MessageInfos:      file_rpc_chassis_rpc_proto_msgTypes,
	}.Build()
	File_rpc_chassis_rpc_proto = out.File
	file_rpc_chassis_rpc_proto_rawDesc = nil
	file_rpc_chassis_rpc_proto_goTypes = nil
	file_rpc_chassis_rpc_proto_depIdxs = nil
}
